[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "library/channel.js",
    "content": "// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\n\r\nimport { triarea2 } from \"./utils\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass Channel {\r\n  constructor() {\r\n    this.portals = [];\r\n  }\r\n\r\n  /**\r\n   * @param {Phaser.Point} p1 \r\n   * @param {Phaser.Point} p2 \r\n   * \r\n   * @memberof Channel\r\n   */\r\n  push(p1, p2 = null) {\r\n    if (p2 === null) p2 = p1;\r\n    this.portals.push({\r\n      left: p1,\r\n      right: p2\r\n    });\r\n  }\r\n\r\n  stringPull() {\r\n    var portals = this.portals;\r\n    var pts = [];\r\n    // Init scan state\r\n    var portalApex, portalLeft, portalRight;\r\n    var apexIndex = 0,\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    portalApex = portals[0].left;\r\n    portalLeft = portals[0].left;\r\n    portalRight = portals[0].right;\r\n\r\n    // Add start point.\r\n    pts.push(portalApex);\r\n\r\n    for (var i = 1; i < portals.length; i++) {\r\n      // Find the next portal vertices\r\n      var left = portals[i].left;\r\n      var right = portals[i].right;\r\n\r\n      // Update right vertex.\r\n      if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n        if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n          // Tighten the funnel.\r\n          portalRight = right;\r\n          rightIndex = i;\r\n        } else {\r\n          // Right vertex just crossed over the left vertex, so the left vertex should\r\n          // now be part of the path.\r\n          pts.push(portalLeft);\r\n\r\n          // Restart scan from portal left point.\r\n\r\n          // Make current left the new apex.\r\n          portalApex = portalLeft;\r\n          apexIndex = leftIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Update left vertex.\r\n      if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n        if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n          // Tighten the funnel.\r\n          portalLeft = left;\r\n          leftIndex = i;\r\n        } else {\r\n          // Left vertex just crossed over the right vertex, so the right vertex should\r\n          // now be part of the path\r\n          pts.push(portalRight);\r\n\r\n          // Restart scan from portal right point.\r\n\r\n          // Make current right the new apex.\r\n          portalApex = portalRight;\r\n          apexIndex = rightIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n      // Append last point to path.\r\n      pts.push(portals[portals.length - 1].left);\r\n    }\r\n\r\n    this.path = pts;\r\n    return pts;\r\n  }\r\n}\r\n\r\nexport default Channel;\r\n",
    "static": true,
    "longname": "library/channel.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "Channel",
    "memberof": "library/channel.js",
    "static": true,
    "longname": "library/channel.js~Channel",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/channel.js",
    "importStyle": "Channel",
    "description": "",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "library/channel.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/channel.js~Channel#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "portals",
    "memberof": "library/channel.js~Channel",
    "static": false,
    "longname": "library/channel.js~Channel#portals",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "push",
    "memberof": "library/channel.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/channel.js~Channel#push",
    "access": null,
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Point"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Point"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "stringPull",
    "memberof": "library/channel.js~Channel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/channel.js~Channel#stringPull",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "path",
    "memberof": "library/channel.js~Channel",
    "static": false,
    "longname": "library/channel.js~Channel#path",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "library/index.js",
    "content": "// Fix for webpack not exporting ES6 module default properly when using global mode of UMD. It ends\r\n// up with someone having to do \"PhaserNavmesh.default\" instead of \"PhaserNavmesh\"\r\nmodule.exports = require(\"./nav-mesh-plugin\").default;\r\n",
    "static": true,
    "longname": "library/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "library/nav-graph.js",
    "content": "import jsastar from \"javascript-astar\";\r\n\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph \r\n * @private\r\n */\r\nclass NavGraph {\r\n  constructor(navPolygons) {\r\n    this.nodes = navPolygons;\r\n    this.init();\r\n  }\r\n\r\n  neighbors(navPolygon) {\r\n    return navPolygon.neighbors;\r\n  }\r\n\r\n  navHeuristic(navPolygon1, navPolygon2) {\r\n    return navPolygon1.centroidDistance(navPolygon2);\r\n  }\r\n\r\n  destroy() {\r\n    this.cleanDirty();\r\n    this.nodes = [];\r\n  }\r\n}\r\n\r\nNavGraph.prototype.init = jsastar.Graph.prototype.init;\r\nNavGraph.prototype.cleanDirty = jsastar.Graph.prototype.cleanDirty;\r\nNavGraph.prototype.markDirty = jsastar.Graph.prototype.markDirty;\r\n\r\nexport default NavGraph;\r\n",
    "static": true,
    "longname": "library/nav-graph.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "class",
    "name": "NavGraph",
    "memberof": "library/nav-graph.js",
    "static": true,
    "longname": "library/nav-graph.js~NavGraph",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/nav-graph.js",
    "importStyle": "NavGraph",
    "description": "Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\nrepo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NavGraph "
      }
    ],
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "library/nav-graph.js~NavGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "navPolygons",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "member",
    "name": "nodes",
    "memberof": "library/nav-graph.js~NavGraph",
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#nodes",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "neighbors",
    "memberof": "library/nav-graph.js~NavGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#neighbors",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "navPolygon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "navHeuristic",
    "memberof": "library/nav-graph.js~NavGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#navHeuristic",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "navPolygon1",
        "types": [
          "*"
        ]
      },
      {
        "name": "navPolygon2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "destroy",
    "memberof": "library/nav-graph.js~NavGraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#destroy",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "nodes",
    "memberof": "library/nav-graph.js~NavGraph",
    "static": false,
    "longname": "library/nav-graph.js~NavGraph#nodes",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "library/nav-mesh.js",
    "content": "import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./nav-poly\";\r\nimport NavGraph from \"./nav-graph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear } from \"./utils\";\r\n\r\n/**\r\n * The workhorse that represents a navigation mesh built from a series of polygons. Once built, the\r\n * mesh can be asked for a path from one point to another point. It has debug methods for \r\n * visualizing paths and visualizing the individual polygons. Some internal terminology usage:\r\n * \r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n */\r\nclass NavMesh {\r\n  /**\r\n   * Creates an instance of NavMesh.\r\n   * \r\n   * @param {Phaser.Game} game\r\n   * @param {Phaser.Polygon[]} polygons\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been\r\n   * shrunk around obstacles (a.k.a the amount obstacles have been expanded)\r\n   */\r\n  constructor(game, polygons, meshShrinkAmount = 0) {\r\n    this.game = game;\r\n    this._debugGraphics = null;\r\n    this._meshShrinkAmount = meshShrinkAmount;\r\n\r\n    // Construct NavPoly instances for each polygon\r\n    this._navPolygons = [];\r\n    for (const [i, polygon] of polygons.entries()) {\r\n      this._navPolygons.push(new NavPoly(game, i, polygon));\r\n    }\r\n\r\n    this._calculateNeighbors();\r\n\r\n    // Astar graph of connections between polygons\r\n    this._graph = new NavGraph(this._navPolygons);\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove references so that navmeshes don't hang around from state to state.\r\n   * You don't have to invoke this directly. If you call destroy on the plugin, it will destroy\r\n   * all navmeshes that have been created. \r\n   * \r\n   * @memberof NavMesh\r\n   */\r\n  destroy() {\r\n    this._graph.destroy();\r\n    for (const poly of this._navPolygons) poly.destroy();\r\n    this._navPolygons = [];\r\n    this.game = null;\r\n    this.disableDebug();\r\n  }\r\n\r\n  /**\r\n   * Find a path from the start point to the end point using this nav mesh.\r\n   *\r\n   * @param {Phaser.Point} startPoint\r\n   * @param {Phaser.Point} endPoint\r\n   * @param {object} [drawOptions={}] Options for controlling debug drawing\r\n   * @param {boolean} [drawOptions.drawPolyPath=false] Whether or not to visualize the path\r\n   * through the polygons - e.g. the path that astar found.\r\n   * @param {boolean} [drawOptions.drawFinalPath=false] Whether or not to visualize the path\r\n   * through the path that was returned.\r\n   * @returns {Phaser.Point[]|null} An array of points if a path is found, or null if no path\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  findPath(startPoint, endPoint, { drawPolyPath = false, drawFinalPath = false } = {}) {\r\n    let startPoly = null;\r\n    let endPoly = null;\r\n    let startDistance = Number.MAX_VALUE;\r\n    let endDistance = Number.MAX_VALUE;\r\n    let d, r;\r\n\r\n    // Find the closest poly for the starting and ending point\r\n    for (const navPoly of this._navPolygons) {\r\n      r = navPoly.boundingRadius;\r\n      // Start\r\n      d = navPoly.centroid.distance(startPoint);\r\n      if (d <= startDistance && d <= r && navPoly.contains(startPoint)) {\r\n        startPoly = navPoly;\r\n        startDistance = d;\r\n      }\r\n      // End\r\n      d = navPoly.centroid.distance(endPoint);\r\n      if (d <= endDistance && d <= r && navPoly.contains(endPoint)) {\r\n        endPoly = navPoly;\r\n        endDistance = d;\r\n      }\r\n    }\r\n\r\n    // If the start point wasn't inside a polygon, run a more liberal check that allows a point\r\n    // to be within meshShrinkAmount radius of a polygon\r\n    if (!startPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        // Check if point is within bounding circle to avoid extra projection calculations\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(startPoint);\r\n        if (d <= r) {\r\n          // Check if projected point is within range of a polgyon and is closer than the\r\n          // previous point\r\n          const { distance } = this._projectPointToPolygon(startPoint, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < startDistance) {\r\n            startPoly = navPoly;\r\n            startDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Same check as above, but for the end point\r\n    if (!endPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(endPoint);\r\n        if (d <= r) {\r\n          const { distance } = this._projectPointToPolygon(endPoint, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < endDistance) {\r\n            endPoly = navPoly;\r\n            endDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // No matching polygons locations for the start or end, so no path found\r\n    if (!startPoly || !endPoly) return null;\r\n\r\n    // If the start and end polygons are the same, return a direct path\r\n    if (startPoly === endPoly) {\r\n      const phaserPath = [startPoint.clone(), endPoint.clone()];\r\n      if (drawFinalPath) this.debugDrawPath(phaserPath, 0xffd900, 10);\r\n      return phaserPath;\r\n    }\r\n\r\n    // Search!\r\n    const astarPath = jsastar.astar.search(this._graph, startPoly, endPoly, {\r\n      heuristic: this._graph.navHeuristic\r\n    });\r\n\r\n    // While the start and end polygons may be valid, no path between them\r\n    if (astarPath.length === 0) return null;\r\n\r\n    // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n    astarPath.unshift(startPoly);\r\n\r\n    // We have a path, so now time for the funnel algorithm\r\n    const channel = new Channel();\r\n    channel.push(startPoint);\r\n    for (let i = 0; i < astarPath.length - 1; i++) {\r\n      const navPolygon = astarPath[i];\r\n      const nextNavPolygon = astarPath[i + 1];\r\n\r\n      // Find the portal\r\n      let portal = null;\r\n      for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n        if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n          portal = navPolygon.portals[i];\r\n        }\r\n      }\r\n\r\n      // Push the portal vertices into the channel\r\n      channel.push(portal.start, portal.end);\r\n    }\r\n    channel.push(endPoint);\r\n\r\n    // Pull a string along the channel to run the funnel\r\n    channel.stringPull();\r\n\r\n    // Clone path, excluding duplicates\r\n    let lastPoint = null;\r\n    const phaserPath = [];\r\n    for (const p of channel.path) {\r\n      const newPoint = p.clone();\r\n      if (!lastPoint || !newPoint.equals(lastPoint)) phaserPath.push(newPoint);\r\n      lastPoint = newPoint;\r\n    }\r\n\r\n    // Call debug drawing\r\n    if (drawPolyPath) {\r\n      const polyPath = astarPath.map(elem => elem.centroid);\r\n      this.debugDrawPath(polyPath, 0x00ff00, 5);\r\n    }\r\n    if (drawFinalPath) this.debugDrawPath(phaserPath, 0xffd900, 10);\r\n\r\n    return phaserPath;\r\n  }\r\n\r\n  _calculateNeighbors() {\r\n    // Fill out the neighbor information for each navpoly\r\n    for (let i = 0; i < this._navPolygons.length; i++) {\r\n      const navPoly = this._navPolygons[i];\r\n\r\n      for (let j = i + 1; j < this._navPolygons.length; j++) {\r\n        const otherNavPoly = this._navPolygons[j];\r\n\r\n        // Check if the other navpoly is within range to touch\r\n        const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n        if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius) continue;\r\n\r\n        // The are in range, so check each edge pairing\r\n        for (const edge of navPoly.edges) {\r\n          for (const otherEdge of otherNavPoly.edges) {\r\n            // If edges aren't collinear, not an option for connecting navpolys\r\n            if (!areCollinear(edge, otherEdge)) continue;\r\n\r\n            // If they are collinear, check if they overlap\r\n            const overlap = this._getSegmentOverlap(edge, otherEdge);\r\n            if (!overlap) continue;\r\n\r\n            // Connections are symmetric!\r\n            navPoly.neighbors.push(otherNavPoly);\r\n            otherNavPoly.neighbors.push(navPoly);\r\n\r\n            // Calculate the portal between the two polygons - this needs to be in\r\n            // counter-clockwise order, relative to each polygon\r\n            const [p1, p2] = overlap;\r\n            let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n            let a1 = navPoly.centroid.angle(overlap[0]);\r\n            let a2 = navPoly.centroid.angle(overlap[1]);\r\n            let d1 = angleDifference(edgeStartAngle, a1);\r\n            let d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              navPoly.portals.push(new Phaser.Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              navPoly.portals.push(new Phaser.Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n            a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n            a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n            d1 = angleDifference(edgeStartAngle, a1);\r\n            d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              otherNavPoly.portals.push(new Phaser.Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              otherNavPoly.portals.push(new Phaser.Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            // Two convex polygons shouldn't be connected more than once! (Unless\r\n            // there are unnecessary vertices...)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check two collinear line segments to see if they overlap by sorting the points.\r\n  // Algorithm source: http://stackoverflow.com/a/17152247\r\n  _getSegmentOverlap(line1, line2) {\r\n    const points = [\r\n      { line: line1, point: line1.start },\r\n      { line: line1, point: line1.end },\r\n      { line: line2, point: line2.start },\r\n      { line: line2, point: line2.end }\r\n    ];\r\n    points.sort(function(a, b) {\r\n      if (a.point.x < b.point.x) return -1;\r\n      else if (a.point.x > b.point.x) return 1;\r\n      else {\r\n        if (a.point.y < b.point.y) return -1;\r\n        else if (a.point.y > b.point.y) return 1;\r\n        else return 0;\r\n      }\r\n    });\r\n    // If the first two points in the array come from the same line, no overlap\r\n    const noOverlap = points[0].line === points[1].line;\r\n    // If the two middle points in the array are the same coordinates, then there is a\r\n    // single point of overlap.\r\n    const singlePointOverlap = points[1].point.equals(points[2].point);\r\n    if (noOverlap || singlePointOverlap) return null;\r\n    else return [points[1].point, points[2].point];\r\n  }\r\n\r\n  /**\r\n   * Project a point onto a polygon in the shortest distance possible.\r\n   * \r\n   * @param {Phaser.Point} point The point to project\r\n   * @param {NavPoly} navPoly The navigation polygon to test against\r\n   * @returns {{point: Phaser.Point, distance: number}}\r\n   * \r\n   * @private\r\n   * @memberof NavMesh\r\n   */\r\n  _projectPointToPolygon(point, navPoly) {\r\n    let closestProjection = null;\r\n    let closestDistance = Number.MAX_VALUE;\r\n    for (const edge of navPoly.edges) {\r\n      const projectedPoint = this._projectPointToEdge(point, edge);\r\n      const d = point.distance(projectedPoint);\r\n      if (closestProjection === null || d < closestDistance) {\r\n        closestDistance = d;\r\n        closestProjection = projectedPoint;\r\n      }\r\n    }\r\n    return { point: closestProjection, distance: closestDistance };\r\n  }\r\n\r\n  _distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  // Project a point onto a line segment\r\n  // JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n  _projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = this._distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = Phaser.Math.clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Phaser.Point(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Enable debug and create graphics overlay (if it hasn't already been created) \r\n   */\r\n  enableDebug() {\r\n    if (!this._debugGraphics) {\r\n      this._debugGraphics = this.game.add.graphics(0, 0);\r\n      this._debugGraphics.alpha = 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disable debug and destroy associated graphics\r\n   */\r\n  disableDebug() {\r\n    if (this._debugGraphics) {\r\n      this._debugGraphics.destroy();\r\n      this._debugGraphics = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether debug is enabled\r\n   * \r\n   * @returns {boolean}\r\n   */\r\n  isDebugEnabled() {\r\n    return this._debugGraphics !== null;\r\n  }\r\n\r\n  /**\r\n   * Clear the debug overlay\r\n   */\r\n  debugClear() {\r\n    if (this._debugGraphics) this._debugGraphics.clear();\r\n  }\r\n\r\n  /**\r\n   * Visualize the polygons in the nav mesh as an overlay on top of the game\r\n   *\r\n   * @param {object} options\r\n   * @param {boolean} [options.drawCentroid=true] For each polygon, show the approx centroid\r\n   * @param {boolean} [options.drawBounds=false] For each polygon, show the bounding radius\r\n   * @param {boolean} [options.drawNeighbors=true] For each polygon, show the connections to\r\n   * neighbors\r\n   * @param {boolean} [options.drawPortals=true] For each polygon, show the portal edges\r\n   */\r\n  debugDrawMesh(\r\n    { drawCentroid = true, drawBounds = false, drawNeighbors = true, drawPortals = true } = {}\r\n  ) {\r\n    if (!this._debugGraphics) this.enableDebug();\r\n    // Visualize the navigation mesh\r\n    for (const navPoly of this._navPolygons) {\r\n      navPoly.draw(this._debugGraphics, drawCentroid, drawBounds, drawNeighbors, drawPortals);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Visualize a path (array of points) on the debug graphics overlay\r\n   * \r\n   * @param {Phaser.Point[]} path \r\n   * @param {number} [color=0x00FF00] \r\n   * @param {number} [thickness=10] \r\n   */\r\n  debugDrawPath(path, color = 0x00ff00, thickness = 10) {\r\n    if (!this._debugGraphics) this.enableDebug();\r\n    if (path.length) {\r\n      // Draw line for path\r\n      this._debugGraphics.lineStyle(thickness, color);\r\n      this._debugGraphics.drawShape(new Phaser.Polygon(...path));\r\n      this._debugGraphics.beginFill(color);\r\n      // Draw circle at start and end of path\r\n      const d = 0.5 * thickness;\r\n      this._debugGraphics.drawEllipse(path[0].x, path[0].y, d, d);\r\n      const lastPoint = path[path.length - 1];\r\n      this._debugGraphics.drawEllipse(lastPoint.x, lastPoint.y, d, d);\r\n      this._debugGraphics.endFill();\r\n    }\r\n  }\r\n}\r\n\r\nexport default NavMesh;\r\n",
    "static": true,
    "longname": "library/nav-mesh.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "class",
    "name": "NavMesh",
    "memberof": "library/nav-mesh.js",
    "static": true,
    "longname": "library/nav-mesh.js~NavMesh",
    "access": null,
    "export": true,
    "importPath": "phaser-navmesh/library/nav-mesh.js",
    "importStyle": "NavMesh",
    "description": "The workhorse that represents a navigation mesh built from a series of polygons. Once built, the\nmesh can be asked for a path from one point to another point. It has debug methods for \nvisualizing paths and visualizing the individual polygons. Some internal terminology usage:\n\n- neighbor: a polygon that shares part of an edge with another polygon\n- portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\n- channel: the path of polygons from starting point to end point\n- pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\n  channel. Equivalent to having a string snaking through a hallway and then pulling it taut.",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#constructor",
    "access": null,
    "description": "Creates an instance of NavMesh.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Game"
        ],
        "spread": false,
        "optional": false,
        "name": "game",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Polygon[]"
        ],
        "spread": false,
        "optional": false,
        "name": "polygons",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "meshShrinkAmount",
        "description": "The amount (in pixels) that the navmesh has been\nshrunk around obstacles (a.k.a the amount obstacles have been expanded)"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "game",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#game",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "_debugGraphics",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_debugGraphics",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "_meshShrinkAmount",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_meshShrinkAmount",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "_navPolygons",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_navPolygons",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "_graph",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_graph",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "destroy",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#destroy",
    "access": null,
    "description": "Cleanup method to remove references so that navmeshes don't hang around from state to state.\nYou don't have to invoke this directly. If you call destroy on the plugin, it will destroy\nall navmeshes that have been created. ",
    "lineNumber": 51,
    "params": []
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_navPolygons",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_navPolygons",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "game",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#game",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "findPath",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#findPath",
    "access": null,
    "description": "Find a path from the start point to the end point using this nav mesh.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Phaser.Point[]|null} An array of points if a path is found, or null if no path"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Point"
        ],
        "spread": false,
        "optional": false,
        "name": "startPoint",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Point"
        ],
        "spread": false,
        "optional": false,
        "name": "endPoint",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "drawOptions",
        "description": "Options for controlling debug drawing"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "drawOptions.drawPolyPath",
        "description": "Whether or not to visualize the path\nthrough the polygons - e.g. the path that astar found."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "drawOptions.drawFinalPath",
        "description": "Whether or not to visualize the path\nthrough the path that was returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Phaser.Point[]",
        "null"
      ],
      "spread": false,
      "description": "An array of points if a path is found, or null if no path"
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "_calculateNeighbors",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_calculateNeighbors",
    "access": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "_getSegmentOverlap",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_getSegmentOverlap",
    "access": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "line1",
        "types": [
          "*"
        ]
      },
      {
        "name": "line2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "_projectPointToPolygon",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_projectPointToPolygon",
    "access": "private",
    "description": "Project a point onto a polygon in the shortest distance possible.",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{point: Phaser.Point, distance: number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Point"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "The point to project"
      },
      {
        "nullable": null,
        "types": [
          "NavPoly"
        ],
        "spread": false,
        "optional": false,
        "name": "navPoly",
        "description": "The navigation polygon to test against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{point: Phaser.Point, distance: number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "_distanceSquared",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_distanceSquared",
    "access": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "_projectPointToEdge",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_projectPointToEdge",
    "access": null,
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "line",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "enableDebug",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#enableDebug",
    "access": null,
    "description": "Enable debug and create graphics overlay (if it hasn't already been created) ",
    "lineNumber": 330,
    "params": []
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "_debugGraphics",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_debugGraphics",
    "access": null,
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "disableDebug",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#disableDebug",
    "access": null,
    "description": "Disable debug and destroy associated graphics",
    "lineNumber": 340,
    "params": []
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "_debugGraphics",
    "memberof": "library/nav-mesh.js~NavMesh",
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#_debugGraphics",
    "access": null,
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "isDebugEnabled",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#isDebugEnabled",
    "access": null,
    "description": "Check whether debug is enabled",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "debugClear",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#debugClear",
    "access": null,
    "description": "Clear the debug overlay",
    "lineNumber": 359,
    "params": []
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "debugDrawMesh",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#debugDrawMesh",
    "access": null,
    "description": "Visualize the polygons in the nav mesh as an overlay on top of the game",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.drawCentroid",
        "description": "For each polygon, show the approx centroid"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.drawBounds",
        "description": "For each polygon, show the bounding radius"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.drawNeighbors",
        "description": "For each polygon, show the connections to\nneighbors"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.drawPortals",
        "description": "For each polygon, show the portal edges"
      }
    ]
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "debugDrawPath",
    "memberof": "library/nav-mesh.js~NavMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh.js~NavMesh#debugDrawPath",
    "access": null,
    "description": "Visualize a path (array of points) on the debug graphics overlay",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Point[]"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0x00FF00",
        "defaultRaw": "0x00FF00",
        "name": "color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "thickness",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "library/nav-poly.js",
    "content": "// Debug color palette\r\nconst palette = [0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951];\r\n\r\n/**\r\n * A class that represents a navigable polygon in a navmesh. It is build from a Phaser.Polygon. It\r\n * has a drawing function to help visualize it's features:\r\n *  - polygon\r\n *  - neighbors - any navpolys that can be reached from this navpoly\r\n *  - portals - overlapping edges between neighbors\r\n *  - centroid - not a true centroid, just an approximation.\r\n *  - boundingRadius - the radius of a circle at the centroid that fits all the points of the poly \r\n * \r\n * It implements the properties and fields that javascript-astar needs - weight, toString, isWall\r\n * and getCost. See GPS test from astar repo for structure: \r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavPoly\r\n * @private\r\n */\r\nclass NavPoly {\r\n  /**\r\n   * Creates an instance of NavPoly.\r\n   * @param {Phaser.Game} game \r\n   * @param {number} id \r\n   * @param {Phaser.Polygon} polygon \r\n   * \r\n   * @memberof NavPoly\r\n   */\r\n  constructor(game, id, polygon) {\r\n    this.game = game;\r\n    this.id = id;\r\n    this.polygon = polygon;\r\n    this.edges = this._calculateEdges();\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n    this.centroid = this._calculateCentroid();\r\n    this.boundingRadius = this._calculateRadius();\r\n\r\n    this.weight = 1; // jsastar property\r\n\r\n    const i = this.id % palette.length;\r\n    this._color = palette[i];\r\n  }\r\n\r\n  contains(point) {\r\n    // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n    // check numerical stability here. It would also be good to optimize this for different shapes.\r\n    return this.polygon.contains(point.x, point.y) || this._isPointOnEdge(point);\r\n  }\r\n\r\n  destroy() {\r\n    this.game = null;\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n  }\r\n\r\n  // jsastar methods\r\n  toString() {\r\n    return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n  }\r\n  isWall() {\r\n    return this.weight === 0;\r\n  }\r\n  centroidDistance(navPolygon) {\r\n    return this.centroid.distance(navPolygon.centroid);\r\n  }\r\n  getCost(navPolygon) {\r\n    return this.centroidDistance(navPolygon);\r\n  }\r\n\r\n  _calculateEdges() {\r\n    const points = this.polygon.points;\r\n    const edges = [];\r\n    for (let i = 1; i < points.length; i++) {\r\n      const p1 = points[i - 1];\r\n      const p2 = points[i];\r\n      edges.push(new Phaser.Line(p1.x, p1.y, p2.x, p2.y));\r\n    }\r\n    const first = points[0];\r\n    const last = points[points.length - 1];\r\n    edges.push(new Phaser.Line(first.x, first.y, last.x, last.y));\r\n    return edges;\r\n  }\r\n\r\n  _calculateCentroid() {\r\n    // NOTE: this is not actually the centroid, it's the average of the vertices - not the same\r\n    // thing!\r\n    const centroid = new Phaser.Point(0, 0);\r\n    const length = this.polygon.points.length;\r\n    for (const point of this.polygon.points) {\r\n      centroid.add(point.x, point.y);\r\n    }\r\n    centroid.divide(length, length);\r\n    return centroid;\r\n  }\r\n\r\n  _calculateRadius() {\r\n    let boundingRadius = 0;\r\n    for (const point of this.polygon.points) {\r\n      const d = this.centroid.distance(point);\r\n      if (d > boundingRadius) boundingRadius = d;\r\n    }\r\n    return boundingRadius;\r\n  }\r\n\r\n  _isPointOnEdge(point) {\r\n    for (const edge of this.edges) {\r\n      if (edge.pointOnSegment(point.x, point.y)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Draw the polygon to given graphics object\r\n   * \r\n   * @param {Phaser.Graphics} graphics \r\n   * @param {boolean} [drawCentroid=true] Show the approx centroid\r\n   * @param {boolean} [drawBounds=false] Show the bounding radius\r\n   * @param {boolean} [drawNeighbors=true] Show the connections to neighbors\r\n   * @param {boolean} [drawPortals=true] Show the portal edges\r\n   * \r\n   * @memberof NavPoly\r\n   */\r\n  draw(\r\n    graphics,\r\n    drawCentroid = true,\r\n    drawBounds = false,\r\n    drawNeighbors = true,\r\n    drawPortals = true\r\n  ) {\r\n    graphics.lineWidth = 0;\r\n    graphics.beginFill(this._color);\r\n    graphics.drawPolygon(this.polygon);\r\n    graphics.endFill();\r\n\r\n    if (drawCentroid) {\r\n      graphics.beginFill(0x000000);\r\n      graphics.drawEllipse(this.centroid.x, this.centroid.y, 4, 4);\r\n      graphics.endFill();\r\n    }\r\n\r\n    if (drawBounds) {\r\n      graphics.lineStyle(1, 0xffffff);\r\n      const r = this.boundingRadius;\r\n      graphics.drawEllipse(this.centroid.x, this.centroid.y, r, r);\r\n    }\r\n\r\n    if (drawNeighbors) {\r\n      graphics.lineStyle(2, 0x000000);\r\n      for (const n of this.neighbors) {\r\n        graphics.moveTo(this.centroid.x, this.centroid.y);\r\n        graphics.lineTo(n.centroid.x, n.centroid.y);\r\n      }\r\n    }\r\n\r\n    if (drawPortals) {\r\n      graphics.lineStyle(10, 0x000000);\r\n      for (const p of this.portals) {\r\n        graphics.moveTo(p.start.x, p.start.y);\r\n        graphics.lineTo(p.end.x, p.end.y);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NavPoly;\r\n",
    "static": true,
    "longname": "library/nav-poly.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "name": "palette",
    "memberof": "library/nav-poly.js",
    "static": true,
    "longname": "library/nav-poly.js~palette",
    "access": null,
    "export": false,
    "importPath": "phaser-navmesh/library/nav-poly.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "class",
    "name": "NavPoly",
    "memberof": "library/nav-poly.js",
    "static": true,
    "longname": "library/nav-poly.js~NavPoly",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/nav-poly.js",
    "importStyle": "NavPoly",
    "description": "A class that represents a navigable polygon in a navmesh. It is build from a Phaser.Polygon. It\nhas a drawing function to help visualize it's features:\n - polygon\n - neighbors - any navpolys that can be reached from this navpoly\n - portals - overlapping edges between neighbors\n - centroid - not a true centroid, just an approximation.\n - boundingRadius - the radius of a circle at the centroid that fits all the points of the poly \n\nIt implements the properties and fields that javascript-astar needs - weight, toString, isWall\nand getCost. See GPS test from astar repo for structure: \nhttps://github.com/bgrins/javascript-astar/blob/master/test/tests.js",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NavPoly"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 44,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#constructor",
    "access": null,
    "description": "Creates an instance of NavPoly.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Game"
        ],
        "spread": false,
        "optional": false,
        "name": "game",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "game",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#game",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "id",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#id",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "polygon",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#polygon",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "edges",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#edges",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "neighbors",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#neighbors",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "portals",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#portals",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "centroid",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#centroid",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "boundingRadius",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#boundingRadius",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "weight",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#weight",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_color",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#_color",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "contains",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#contains",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "point",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "destroy",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#destroy",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "game",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#game",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "neighbors",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#neighbors",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "portals",
    "memberof": "library/nav-poly.js~NavPoly",
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#portals",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "toString",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#toString",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "isWall",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#isWall",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "centroidDistance",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#centroidDistance",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "navPolygon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getCost",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#getCost",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "navPolygon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "_calculateEdges",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#_calculateEdges",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "_calculateCentroid",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#_calculateCentroid",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "_calculateRadius",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#_calculateRadius",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_isPointOnEdge",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#_isPointOnEdge",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "point",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "draw",
    "memberof": "library/nav-poly.js~NavPoly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-poly.js~NavPoly#draw",
    "access": null,
    "description": "Draw the polygon to given graphics object",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Graphics"
        ],
        "spread": false,
        "optional": false,
        "name": "graphics",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "drawCentroid",
        "description": "Show the approx centroid"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "drawBounds",
        "description": "Show the bounding radius"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "drawNeighbors",
        "description": "Show the connections to neighbors"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "drawPortals",
        "description": "Show the portal edges"
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "library/utils.js",
    "content": "/**\r\n * Twice the area of the triangle formed by a, b and c\r\n * @private\r\n */\r\nexport function triarea2(a, b, c) {\r\n  const ax = b.x - a.x;\r\n  const ay = b.y - a.y;\r\n  const bx = c.x - a.x;\r\n  const by = c.y - a.y;\r\n  return bx * ay - ax * by;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n  if (Math.abs(value1 - value2) <= errorMargin) return true;\r\n  else return false;\r\n}\r\n\r\n/**\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n * @private\r\n */\r\nexport function angleDifference(x, y) {\r\n  let a = x - y;\r\n  const i = a + Math.PI;\r\n  const j = Math.PI * 2;\r\n  a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n  a -= Math.PI;\r\n  return a;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n  // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n  // by their points\r\n  const area1 = triarea2(line1.start, line1.end, line2.start);\r\n  const area2 = triarea2(line1.start, line1.end, line2.end);\r\n  if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n    return true;\r\n  } else return false;\r\n}\r\n",
    "static": true,
    "longname": "library/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "triarea2",
    "memberof": "library/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/utils.js~triarea2",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/utils.js",
    "importStyle": "{triarea2}",
    "description": "Twice the area of the triangle formed by a, b and c",
    "lineNumber": 5,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "almostEqual",
    "memberof": "library/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/utils.js~almostEqual",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/utils.js",
    "importStyle": "{almostEqual}",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "value1",
        "types": [
          "*"
        ]
      },
      {
        "name": "value2",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorMargin",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.0001,
        "defaultValue": "0.0001"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "angleDifference",
    "memberof": "library/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/utils.js~angleDifference",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/utils.js",
    "importStyle": "{angleDifference}",
    "description": "https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0",
    "lineNumber": 25,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "areCollinear",
    "memberof": "library/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/utils.js~areCollinear",
    "access": "private",
    "export": true,
    "importPath": "phaser-navmesh/library/utils.js",
    "importStyle": "{areCollinear}",
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "name": "line1",
        "types": [
          "*"
        ]
      },
      {
        "name": "line2",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorMargin",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.0001,
        "defaultValue": "0.0001"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "library/nav-mesh-plugin.js",
    "content": "// const triangulate = require(\"./triangulate\");\r\nimport NavMesh from \"./nav-mesh\";\r\n\r\n/**\r\n * This plugin can create navigation meshes for use in Phaser. The navmeshes can be constructed from\r\n * convex polygons embedded in a Tiled map. Instantiate this using game.plugins.add(NavMeshPlugin).\r\n *\r\n * @param {Phaser.Game} game\r\n * @param {Phaser.PluginManager} manager\r\n */\r\nexport default class NavMeshPlugin extends Phaser.Plugin {\r\n  constructor(game, manager) {\r\n    super(game, manager);\r\n    this._navMeshes = [];\r\n  }\r\n\r\n  /**\r\n   * Load a navmesh from Tiled and switch it to be the current navmesh. Currently assumes that the\r\n   * polygons are squares!\r\n   * \r\n   * @param {Phaser.Tilemap} tilemap The tilemap that contains polygons under an object layer\r\n   * @param {string} objectKey The name of the object layer in the tilemap\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been\r\n   * shrunk around obstacles (a.k.a the amount obstacles have been expanded)\r\n   * \r\n   * @memberof NavMeshPlugin\r\n   */\r\n  buildMeshFromTiled(tilemap, objectKey, meshShrinkAmount = 0) {\r\n    // Load up the object layer\r\n    const rects = tilemap.objects[objectKey] || [];\r\n    // Loop over the objects and construct a polygon\r\n    const polygons = [];\r\n    for (const r of rects) {\r\n      const top = r.y;\r\n      const bottom = r.y + r.height;\r\n      const left = r.x;\r\n      const right = r.x + r.width;\r\n      const poly = new Phaser.Polygon(left, top, left, bottom, right, bottom, right, top);\r\n      polygons.push(poly);\r\n    }\r\n    // Build the navmesh\r\n    const mesh = new NavMesh(this.game, polygons, meshShrinkAmount);\r\n    this._navMeshes.push(mesh);\r\n    return mesh;\r\n  }\r\n\r\n  destroy() {\r\n    for (const mesh of this._navMeshes) mesh.destroy();\r\n    this._navMeshes = [];\r\n    super.destroy();\r\n  }\r\n\r\n  // /**\r\n  //  * Build a navmesh from an array of convex polygons. This currently tesselates the polygons into\r\n  //  * triangles. They aren't as efficient or as well designed as ones made by hand in Tiled.\r\n  //  *\r\n  //  * @param {string} levelName The key to use to store the navmesh in the plugin\r\n  //  * @param {[]} hulls An array of convex polygons describing the obstacles in the\r\n  //  * level. See lighting-plugin/hull-from-tiles.\r\n  //  *\r\n  //  * @memberof NavMeshPlugin\r\n  //  */\r\n  // buildMesh(levelName, hulls) {\r\n  //     const contours = this._buildContours(hulls);\r\n  //     // Get an array of triangulated vertices\r\n  //     const triangles = triangulate(contours, false); // Counter-clockwise ordering!\r\n  //     const polygons = [];\r\n  //     for (let i = 0; i < triangles.length; i += 6) {\r\n  //         const poly = new Phaser.Polygon(\r\n  //             // These should be in counter-clockwise order from triangulate\r\n  //             triangles[i + 0], triangles[i + 1],\r\n  //             triangles[i + 2], triangles[i + 3],\r\n  //             triangles[i + 4], triangles[i + 5]\r\n  //         );\r\n  //         polygons.push(poly);\r\n  //     }\r\n  //     const navMesh = new NavMesh(this.game, polygons);\r\n  //     this._navMeshes[levelName] = navMesh;\r\n  //     this._currentNavMesh = navMesh;\r\n  // }\r\n\r\n  // /**\r\n  //  * @param {[]} hulls\r\n  //  * @returns\r\n  //  *\r\n  //  * @memberof NavMeshPlugin\r\n  //  */\r\n  // _buildContours(hulls) {\r\n  //     const w = this.game.width;\r\n  //     const h = this.game.height;\r\n  //     // Start the contours\r\n  //     const contours = [\r\n  //         // Full screen - counter clockwise\r\n  //         Float32Array.of(0,0, 0,h, w,h, w,0)\r\n  //     ];\r\n  //     // For each convex hull add the contour\r\n  //     for (const hull of hulls) {\r\n  //         const contour = [];\r\n  //         for (const lineInfo of hull) {\r\n  //             contour.push(lineInfo.line.start.x, lineInfo.line.start.y);\r\n  //         }\r\n  //         contours.push(Float32Array.from(contour));\r\n  //     }\r\n  //     return contours;\r\n  // }\r\n}\r\n",
    "static": true,
    "longname": "library/nav-mesh-plugin.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "NavMeshPlugin",
    "memberof": "library/nav-mesh-plugin.js",
    "static": true,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "access": null,
    "export": true,
    "importPath": "phaser-navmesh/library/nav-mesh-plugin.js",
    "importStyle": "NavMeshPlugin",
    "description": "This plugin can create navigation meshes for use in Phaser. The navmeshes can be constructed from\nconvex polygons embedded in a Tiled map. Instantiate this using game.plugins.add(NavMeshPlugin).",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Game"
        ],
        "spread": false,
        "optional": false,
        "name": "game",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Phaser.PluginManager"
        ],
        "spread": false,
        "optional": false,
        "name": "manager",
        "description": ""
      }
    ],
    "interface": false,
    "extends": [
      "Phaser~Phaser.Plugin"
    ]
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin#constructor",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "game",
        "types": [
          "*"
        ]
      },
      {
        "name": "manager",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_navMeshes",
    "memberof": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "static": false,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin#_navMeshes",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "buildMeshFromTiled",
    "memberof": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin#buildMeshFromTiled",
    "access": null,
    "description": "Load a navmesh from Tiled and switch it to be the current navmesh. Currently assumes that the\npolygons are squares!",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Tilemap"
        ],
        "spread": false,
        "optional": false,
        "name": "tilemap",
        "description": "The tilemap that contains polygons under an object layer"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "objectKey",
        "description": "The name of the object layer in the tilemap"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "meshShrinkAmount",
        "description": "The amount (in pixels) that the navmesh has been\nshrunk around obstacles (a.k.a the amount obstacles have been expanded)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "destroy",
    "memberof": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin#destroy",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "_navMeshes",
    "memberof": "library/nav-mesh-plugin.js~NavMeshPlugin",
    "static": false,
    "longname": "library/nav-mesh-plugin.js~NavMeshPlugin#_navMeshes",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "library/__test__/utils.test.js",
    "content": "import { triarea2, almostEqual, angleDifference, areCollinear } from \"../utils\";\r\n\r\ndescribe(\"almostEqual\", () => {\r\n  test(\"should be false for numbers with a significant difference\", () => {\r\n    expect(almostEqual(1, 2)).toEqual(false);\r\n    expect(almostEqual(-1, -0.95)).toEqual(false);\r\n  });\r\n  test(\"should be true for numbers that are within floating point error margin\", () => {\r\n    expect(almostEqual(1, 1.00001)).toEqual(true);\r\n    expect(almostEqual(1 / 3, 0.33333)).toEqual(true);\r\n  });\r\n});\r\n\r\ndescribe(\"areCollinear\", () => {\r\n  const line = (x1, y1, x2, y2) => ({ start: { x: x1, y: y1 }, end: { x: x2, y: y2 } });\r\n  test(\"should return false for non-collinear lines\", () => {\r\n    expect(areCollinear(line(-5, 0, 5, 0), line(-5, 10, 5, 10))).toEqual(false); // Parallel\r\n    expect(areCollinear(line(0, 0, 10, 10), line(0, 0, 0, 10))).toEqual(false); // Intersecting\r\n  });\r\n  test(\"should return true for collinear lines\", () => {\r\n    expect(areCollinear(line(10, 10, 0, 0), line(10, 10, 0, 0))).toEqual(true); // Same\r\n    expect(areCollinear(line(0, 0, 10, 10), line(10, 10, 0, 0))).toEqual(true); // Reversed\r\n  });\r\n});\r\n\r\ndescribe(\"angleDifference\", () => {\r\n  test(\"should return the difference between angles in radians\", () => {\r\n    expect(angleDifference(Math.PI, Math.PI / 2)).toEqual(Math.PI / 2);\r\n    expect(angleDifference(1, -2)).toEqual(3);\r\n  });\r\n  test(\"should wrap angles to calculate minimum angular distance\", () => {\r\n    expect(angleDifference(4 * Math.PI, Math.PI / 2)).toEqual(-Math.PI / 2);\r\n    expect(angleDifference(-3 * Math.PI, 0)).toEqual(-Math.PI);\r\n  });\r\n});\r\n\r\n// TODO: triarea2\r\n",
    "static": true,
    "longname": "library/__test__/utils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "library/__test__/nav-mesh.test.js",
    "content": "import NavMesh from \"../nav-mesh\";\r\nglobal.PIXI = require(\"phaser-ce/build/custom/pixi\");\r\nglobal.p2 = require(\"phaser-ce/build/custom/p2\");\r\nglobal.Phaser = require(\"phaser-ce/build/custom/phaser-split\");\r\n\r\nconst point = (x, y) => new Phaser.Point(x, y);\r\nconst poly = (...args) => new Phaser.Polygon(...args);\r\n\r\ndescribe(\"An empty NavMesh instance\", () => {\r\n  let emptyNavMesh;\r\n  beforeAll(() => (emptyNavMesh = new NavMesh({}, [])));\r\n\r\n  it(\"should not throw an error on construction\", () => {\r\n    expect(() => emptyNavMesh).not.toThrow();\r\n  });\r\n\r\n  it(\"should always return null when queried for a path\", () => {\r\n    const path = emptyNavMesh.findPath(point(10, 20), point(30, 50));\r\n    expect(path).toBeNull();\r\n  });\r\n});\r\n\r\ndescribe(\"A simple, fully connected NavMesh instance\", () => {\r\n  let navMesh;\r\n  /*\r\n    - - - - -\r\n    - 1 - 2 -\r\n    - - - - -\r\n  */\r\n  // prettier-ignore\r\n  const polygons = [\r\n    poly(0,0, 10,0, 10,10, 0,10), // 1\r\n    poly(10,0, 20,0, 20,10, 10,10) // 2\r\n  ];\r\n  beforeAll(() => (navMesh = new NavMesh({}, polygons)));\r\n\r\n  it(\"should return a direct path when points are in the same polygon\", () => {\r\n    const path = navMesh.findPath(point(0, 0), point(5, 5));\r\n    expect(path).toEqual([point(0, 0), point(5, 5)]);\r\n  });\r\n\r\n  it(\"should return null when a point is outside all polygon\", () => {\r\n    const path = navMesh.findPath(point(-10, 0), point(5, 5));\r\n    expect(path).toBeNull();\r\n  });\r\n\r\n  it(\"should return a path when points are in neighboring polygons\", () => {\r\n    const path = navMesh.findPath(point(5, 5), point(15, 5));\r\n    expect(path).toEqual([point(5, 5), point(15, 5)]);\r\n  });\r\n\r\n  it(\"should return a path when points are on the edges of the polygons\", () => {\r\n    const path = navMesh.findPath(point(0, 0), point(20, 10));\r\n    expect(path).toEqual([point(0, 0), point(20, 10)]);\r\n  });\r\n});\r\n\r\ndescribe(\"A NavMesh instance with two islands\", () => {\r\n  let navMesh;\r\n  /*\r\n    - - -   - - -\r\n    - 1 -   - 2 -\r\n    - - -   - - -\r\n  */\r\n  // prettier-ignore\r\n  const polygons = [\r\n    poly(0,0, 10,0, 10,10, 0,10), // 1\r\n    poly(40,0, 50,0, 50,10, 40,10), // 2\r\n  ];\r\n  beforeAll(() => (navMesh = new NavMesh({}, polygons)));\r\n\r\n  it(\"should return null when queried for a path between islands\", () => {\r\n    const path = navMesh.findPath(point(0, 0), point(40, 0));\r\n    expect(path).toBeNull();\r\n  });\r\n});\r\n\r\ndescribe(\"A NavMesh instance with a corner\", () => {\r\n  let navMesh;\r\n  /*\r\n    - - - - -\r\n    - 1 - 2 -\r\n    - - - - -\r\n        - 3 -\r\n        - - -\r\n  */\r\n  // prettier-ignore\r\n  const polygons = [\r\n    poly(0,0, 10,0, 10,10, 0,10), // 1\r\n    poly(10,0, 20,0, 20,10, 10,10), // 2\r\n    poly(10,10, 20,10, 20,20, 10,20) // 3\r\n  ];\r\n  beforeAll(() => (navMesh = new NavMesh({}, polygons)));\r\n\r\n  it(\"should return a path that hugs the corner\", () => {\r\n    const path = navMesh.findPath(point(0, 0), point(10, 20));\r\n    expect(path).toEqual([point(0, 0), point(10, 10), point(10, 20)]);\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "library/__test__/nav-mesh.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "point",
    "memberof": "library/__test__/nav-mesh.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/__test__/nav-mesh.test.js~point",
    "access": null,
    "export": false,
    "importPath": "phaser-navmesh/library/__test__/nav-mesh.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "poly",
    "memberof": "library/__test__/nav-mesh.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "library/__test__/nav-mesh.test.js~poly",
    "access": null,
    "export": false,
    "importPath": "phaser-navmesh/library/__test__/nav-mesh.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]